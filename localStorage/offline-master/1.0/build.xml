<project name="component.build" default="build" basedir="."  xmlns:ac="antlib:net.sf.antcontrib">
    <description>gallery component  Build File</description>
    <property name="charset" value="utf-8"/>
    <property name="name" value="offline"/>
    <property name="version" value="1.0"/>
    <property name="build.files" value="index.js"/>
    <property name="tool.dir" location="../../../kissy-tools"/>
    <property name="compiler" location="${tool.dir}/closure-compiler/compiler.jar"/>
    <property name="yuicompressor" location="${tool.dir}/yuicompressor/yuicompressor.jar"/>
    <property name="module.compiler" value="${tool.dir}/module-compiler/module-compiler.jar"/>
    <property name="build.dir" location="./build/"/>
    <property name="src.dir" location="."/>
    <target name="dircheck">
        <condition property="build.dir.exists">
            <available file="${build.dir}" type="dir"/>
        </condition>
    </target>
    <!--删除build目录下的所有文件-->
    <target name="clean-build" if="${build.dir.exists}" depends="dircheck">
        <delete >
            <fileset dir="${build.dir}" includes="**/*.js,**/*.css,**/*.swf,**/*.less"/>
        </delete>
    </target>
    <target name="mkdir">
        <mkdir dir="${build.dir}">

        </mkdir>
    </target>
    <!--压缩css文件-->
    <target name="minify-css">
        <apply executable="java" verbose="true" dest="${build.dir}" failonerror="true" parallel="false">
            <fileset dir="${build.dir}" includes="**/*.css" excludes="*-min.css"/>
            <arg line="-jar"/>
            <arg path="${yuicompressor}/"/>
            <arg line="--charset gbk"/>
            <arg value="--type"/>
            <arg value="css"/>
            <arg value="-o"/>
            <targetfile/>
            <mapper type="glob" from="*.css" to="*-min.css"/>
        </apply>
    </target>
    <!--压缩前去除页面多余空白-->
    <target name="crlf">
        <fixcrlf includes="*.js" srcdir="${build.dir}" encoding="utf8" eol="crlf"></fixcrlf>
    </target>
    <!--压缩脚本-->
    <target name="minify" depends="crlf">
        <apply executable="java" verbose="true" dest="${build.dir}" failonerror="true" parallel="false">
            <fileset dir="${build.dir}" includes="**/*.js"/>
            <arg line="-jar"/>
            <arg path="${tool.dir}/closure-compiler/compiler.jar"/>
            <arg line="--charset utf8"/>
            <arg value="--warning_level"/>
            <arg value="QUIET"/>
            <arg value="--js"/>
            <srcfile/>
            <arg value="--js_output_file"/>
            <targetfile/>
            <mapper type="regexp" from="^(.*)\.js$" to="\1-min.js"/>
        </apply>
    </target>
    <!--改变压缩文件的编码-->
    <target name="native2ascii">
        <native2ascii encoding="${charset}" src="${build.dir}" dest="${build.dir}" includes="**/*-min.js" ext=".ascii.js"/>
        <delete >
            <fileset dir="${build.dir}" includes="**/*-min.js"/>
        </delete>
        <renameext srcDir="${build.dir}" includes="**/*.ascii.js"  fromExtension=".ascii.js" toExtension=".js" replace="true"/>
    </target>

    <!--js  combo 地址获取-->
    <target name='combo'>
        <ac:for param="page">
            <!--入口模块文件所在目录的所有模块循环处理-->
            <path>
                <fileset dir="${src.dir}" includes="${build.files}"/>
            </path>
            <sequential>
                <ac:var name="var.modname" unset="true"/>
                <basename property="var.modname" file="@{page}" suffix=".js"/>
                <echo>
                    build ${var.modname} in @{page}
                </echo>
                <java classname="com.taobao.f2e.Main">
                    <arg value="-require"/>
                    <!-- 入口模块 -->
                    <arg value="gallery/${name}/${version}/${var.modname}"/>

                    <arg value="-baseUrls"/>
                    <arg value="../../../"/>

                    <arg value="-encodings"/>
                    <arg value="${charset}"/>

                    <arg value="-outputEncoding"/>
                    <arg value="${charset}"/>

                    <arg value="-output"/>
                    <arg value="${build.dir}/${var.modname}.js"/>

                    <arg value="-outputDependency"/>
                    <arg value="${build.dir}/${var.modname}.dep.js"/>

                    <classpath>
                        <pathelement path="${module.compiler}"/>
                        <pathelement path="${java.class.path}"/>
                    </classpath>
                </java>
            </sequential>
        </ac:for>
    </target>

    <target name="build" depends="clean-build,combo,minify-css,minify,native2ascii">
    </target>
</project>